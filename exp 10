import heapq

class Node:
    def __init__(self, name, g=0, h=0, parent=None):
        self.name = name
        self.g = g  # Cost from start node
        self.h = h  # Heuristic cost to goal
        self.f = g + h  # Total cost
        self.parent = parent

    def __lt__(self, other):
        return self.f < other.f


def a_star_search(graph, heuristics, start, goal):
    open_list = []
    closed_list = set()

    start_node = Node(start, g=0, h=heuristics[start])
    heapq.heappush(open_list, start_node)

    while open_list:
        current = heapq.heappop(open_list)

        # Goal check
        if current.name == goal:
            path = []
            while current:
                path.append(current.name)
                current = current.parent
            return path[::-1]

        closed_list.add(current.name)

        # Explore neighbors
        for neighbor, cost in graph[current.name].items():
            if neighbor in closed_list:
                continue

            g = current.g + cost
            h = heuristics[neighbor]
            neighbor_node = Node(neighbor, g, h, current)

            # Check if neighbor already in open list with lower f
            if any(open_node.name == neighbor and open_node.f <= neighbor_node.f for open_node in open_list):
                continue

            heapq.heappush(open_list, neighbor_node)

    return None  # No path found


# Example usage
if __name__ == "__main__":
    # Graph represented as adjacency list with weights
    graph = {
        'A': {'B': 1, 'C': 3},
        'B': {'D': 3, 'E': 1},
        'C': {'F': 5},
        'D': {'G': 2},
        'E': {'G': 1},
        'F': {'G': 2},
        'G': {}
    }

    # Heuristic values (Estimated cost from each node to goal 'G')
    heuristics = {
        'A': 7,
        'B': 6,
        'C': 4,
        'D': 2,
        'E': 1,
        'F': 2,
        'G': 0
    }

    start, goal = 'A', 'G'
    path = a_star_search(graph, heuristics, start, goal)
    print("Path found:", " -> ".join(path))
Path found: A -> B -> E -> G

