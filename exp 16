import numpy as np

# Sigmoid activation and derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Mean Squared Error
def mse(y_true, y_pred):
    return np.mean((y_true - y_pred) ** 2)

# Feed Forward Neural Network class
class FeedForwardNN:
    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.1):
        # Initialize weights and biases randomly
        self.W1 = np.random.randn(input_size, hidden_size)
        self.b1 = np.zeros((1, hidden_size))
        self.W2 = np.random.randn(hidden_size, output_size)
        self.b2 = np.zeros((1, output_size))
        self.lr = learning_rate

    def forward(self, X):
        # Input to hidden
        self.z1 = np.dot(X, self.W1) + self.b1
        self.a1 = sigmoid(self.z1)
        
        # Hidden to output
        self.z2 = np.dot(self.a1, self.W2) + self.b2
        self.a2 = sigmoid(self.z2)
        
        return self.a2

    def backward(self, X, y, output):
        # Error at output
        error = y - output
        d_output = error * sigmoid_derivative(output)
        
        # Error at hidden
        error_hidden = np.dot(d_output, self.W2.T)
        d_hidden = error_hidden * sigmoid_derivative(self.a1)
        
        # Update weights and biases
        self.W2 += self.lr * np.dot(self.a1.T, d_output)
        self.b2 += self.lr * np.sum(d_output, axis=0, keepdims=True)
        self.W1 += self.lr * np.dot(X.T, d_hidden)
        self.b1 += self.lr * np.sum(d_hidden, axis=0, keepdims=True)

    def train(self, X, y, epochs=10000):
        for epoch in range(epochs):
            output = self.forward(X)
            self.backward(X, y, output)
            if (epoch+1) % 1000 == 0:
                loss = mse(y, output)
                print(f"Epoch {epoch+1}, Loss: {loss:.4f}")

# Example usage with XOR problem
if __name__ == "__main__":
    # XOR input and output
    X = np.array([[0,0],
                  [0,1],
                  [1,0],
                  [1,1]])
    y = np.array([[0],
                  [1],
                  [1],
                  [0]])

    # Create FFNN (2 input → 2 hidden → 1 output)
    nn = FeedForwardNN(input_size=2, hidden_size=2, output_size=1, learning_rate=0.1)
    nn.train(X, y, epochs=10000)

    # Predictions
    print("\nPredictions after training:")
    for inp in X:
        print(f"{inp} => {nn.forward(inp)}")
